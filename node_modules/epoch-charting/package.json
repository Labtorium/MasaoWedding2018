{
  "_args": [
    [
      {
        "raw": "epoch-charting",
        "scope": null,
        "escapedName": "epoch-charting",
        "name": "epoch-charting",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/fujii/node_app/MasuoWedding_2018"
    ]
  ],
  "_from": "epoch-charting@latest",
  "_id": "epoch-charting@0.8.4",
  "_inCache": true,
  "_location": "/epoch-charting",
  "_nodeVersion": "4.2.1",
  "_npmUser": {
    "name": "rsandor",
    "email": "sandor.richards@gmail.com"
  },
  "_npmVersion": "2.14.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "epoch-charting",
    "scope": null,
    "escapedName": "epoch-charting",
    "name": "epoch-charting",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/epoch-charting/-/epoch-charting-0.8.4.tgz",
  "_shasum": "07e21c7d20333e037415d3273ebc9d9290c2be5a",
  "_shrinkwrap": null,
  "_spec": "epoch-charting",
  "_where": "/Users/fujii/node_app/MasuoWedding_2018",
  "author": {
    "name": "rsandor",
    "url": "https://github.com/rsandor"
  },
  "bugs": {
    "url": "https://github.com/fastly/epoch/issues"
  },
  "dependencies": {
    "d3": "^3.4.13"
  },
  "description": "A general purpose real-time charting library for building beautiful, smooth, and high performance visualizations.",
  "devDependencies": {
    "chai": "^3.3.0",
    "codo": "^2.0.11",
    "coffee-script": "^1.10.0",
    "del": "^2.0.2",
    "gulp": "^3.9.0",
    "gulp-coffee": "^2.3.1",
    "gulp-concat": "^2.6.0",
    "gulp-mocha": "^2.1.3",
    "gulp-order": "^1.1.1",
    "gulp-rename": "^1.2.2",
    "gulp-sass": "^2.0.4",
    "gulp-uglify": "^1.4.1",
    "gulp-util": "^3.0.6",
    "jsdom": "^6.5.1",
    "mocha": "^2.3.3",
    "node-minify": "^1.2.1",
    "node-sass": "^3.3.3",
    "sinon": "^1.17.1",
    "xmlhttprequest": "^1.7.0"
  },
  "directories": {},
  "dist": {
    "shasum": "07e21c7d20333e037415d3273ebc9d9290c2be5a",
    "tarball": "https://registry.npmjs.org/epoch-charting/-/epoch-charting-0.8.4.tgz"
  },
  "gitHead": "96692523d8a27e02e370049447a4897d844bff35",
  "homepage": "http://fastly.github.io/epoch/",
  "keywords": [
    "chart",
    "charting",
    "visualization",
    "svg",
    "animation",
    "canvas",
    "d3"
  ],
  "license": "MIT",
  "main": "dist/js/epoch.js",
  "maintainers": [
    {
      "name": "rsandor",
      "email": "sandor.richards@gmail.com"
    }
  ],
  "name": "epoch-charting",
  "optionalDependencies": {},
  "readme": "## Epoch\nBy Ryan Sandor Richards\n\n[![Build Status](https://travis-ci.org/epochjs/epoch.svg?branch=master)](https://travis-ci.org/epochjs/epoch)\n[![Dependency Status](https://david-dm.org/epochjs/epoch.svg)](https://david-dm.org/epochjs/epoch)\n[![devDependency Status](https://david-dm.org/epochjs/epoch/dev-status.svg)](https://david-dm.org/epochjs/epoch#info=devDependencies)\n\nEpoch is a general purpose charting library for application developers and visualization designers. It focuses on two different aspects of visualization programming: **basic charts** for creating historical reports, and **real-time charts** for displaying frequently updating timeseries data.\n\nTo get started using Epoch, please refer to the [Epoch Project Site](http://epochjs.github.io/epoch/). There you can find full documentation and guides to help you start using Epoch right away.\n\n### Installation\nEpoch can be easily installed via the following package managers:\n\n* [npm](https://www.npmjs.com/package/epoch-charting)\n* [bower](http://bower.io/search/?q=epoch)\n* [packagist](https://packagist.org/packages/epochjs/epoch)\n\nIf you don't see your favorite package manager in the list above feel free to\n[open up an issue](https://github.com/epochjs/epoch/issues/new) and let us know.\nFinally, you can download any release of the library from the\n[project releases page](https://github.com/epochjs/epoch/releases).\n\n**Important:** Epoch requires [d3](https://github.com/mbostock/d3). In order to\nwork properly your page must load d3 before epoch.\n\n#### Public CDN URLs\nIf you don't want to host the files yourself, you can use\n[jsDelivr](http://http://www.jsdelivr.com/) to serve the files:\n\n1. Visit [epoch page on jsDelvr](http://www.jsdelivr.com/projects/epoch).\n2. Copy the provided URL's and link to them in your project.\n\n### Developing Epoch\n\nDeveloping Epoch is a reasonably straight forward process. In this section we'll\ncover the basic on how to develop Epoch by detailing common build task, exploring\nhow the source is arranged, and finally show how to use rendering tests to aid\ndevelopment.\n\n#### Configuring Development Environment\n\nEpoch requires the following for development:\n\n1. [Node.js](https://nodejs.org/en/) (v4.1.1+)\n2. [NPM](https://www.npmjs.com/) (v2.1.0+)\n\nOnce both are installed on your machine you will need to run `npm install` from\nthe repository's root directory in order to install the npm packages required\nto develop epoch.\n\nOnce you have installed the required npm packages you can use `gulp build` to\nfully rebuild the source (see more information about gulp tasks below).\n\n\n#### Basic Development Process\n\nThe best way to start contributing to Epoch is to follow these steps:\n\n1. Change to the source directory for the project\n2. Run `gulp watch` to recompile the project after source files change\n3. Make changes in a source file (either in `src/` or `sass/`)\n4. In a web browser open the `test/index.html` and browse the rendering tests\n5. Use the rendering tests to see if your changes had the desired result\n6. Ensure unit tests with pass `npm test`\n\n#### Testing\n\nEpoch uses two types of testing to ensure that changes do not cause unintended\nside effects. The first, unit tests, ensure that the core functional components\nof the library work as expected. The second, rendering tests, allow you to\nensure that charts and graphs are correctly rendered.\n\nIt is important to keep both unit test and rendering tests up-to-date! When\ndeveloping, use the following guidelines:\n\n* When adding new features make sure to add new tests\n* When changing existing functionality, ensure that the appropriate both types\n  of tests still pass\n* If you want to make a new type of chart, add a whole new test suite for that\n  chart!\n\nKeeping the tests current makes it easier for others to review your code and\nspot issues. Also, pull requests without appropriate testing will not be\nmerged.\n\n\n#### Gulp Tasks\n\nEpoch uses [gulp](https://github.com/gulpjs/gulp) to perform various tasks. The\n`gulpfile.js` file defines the following tasks:\n\n* `gulp clean` - Cleans the `dist/` directory.\n* `gulp build` - Builds the CoffeeScript and Sass source into the `dist/`\n  directory.\n* `gulp watch` - Starts a watch script to recompile CoffeeScript and Sass when\n  any files change.\n\n#### Source Structure\n\nThe directory structure for the Epoch project follows some basic guidelines, here's an overview of how it is structured:\n\n```\ndist/                  - Compiled JavaScript and CSS source\nsrc/                   - Main source directory\n  core/                - Core Epoch Library Files\n    util.coffee        - Library Utility Routines\n    d3.coffee          - d3 Extensions\n    format.coffee      - Data formatters\n    chart.coffee       - Base Chart Classes\n    css.coffee         - CSS Querying Engine\n  adapters/            - 3rd Party Library Adapters (currently only jQuery)\n  basic/               - Basic Chart Classes\n  time/                - Real-time Chart Classes\n  adapters.coffee      - Options / Global Classes for Adapter Implementations\n  basic.coffee         - Base Classes for Basic Charts\n  data.coffee          - Data Formatting\n  epoch.coffee         - Main source file, defines name spaces, etc.\n  model.coffee         - Data Model\n  time.coffee          - Base Classes for Real-Time Charts\nsass/                  - Scss source for the default epoch stylesheet\ntests/\n  render/              - Rendering tests\n    basic/             - Basic chart rendering tests\n    real-time/         - Real-time rendering tests\n  unit/                - Unit tests\n```\n\n### Release Checklist\n\n- Run `npm test` and ensure all tests pass\n- Run `npm version [major|minor|patch]`\n- Run `npm publish`\n- Update CHANGELOG.md with the changes since last release\n- Update the `gh-pages` branch's library version in `_config.yml`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fastly/epoch.git"
  },
  "scripts": {
    "build": "gulp build",
    "codo": "codo --quiet --private --name Epoch --readme README.md --title 'Epoch Documentation' --output codo-doc src - LICENSE",
    "test": "npm run build && npm run unit",
    "unit": "mocha --recursive --compilers coffee:coffee-script/register tests/unit/"
  },
  "version": "0.8.4"
}
